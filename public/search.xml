<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UEFI compile environment configuration</title>
      <link href="2021/04/21/UEFI-compile-environment-configuration/"/>
      <url>2021/04/21/UEFI-compile-environment-configuration/</url>
      
        <content type="html"><![CDATA[<h1 id="EDKII-下载"><a href="#EDKII-下载" class="headerlink" title="EDKII 下载"></a>EDKII 下载</h1><ol><li><h5 id="首先从github将edkii-clone到本地"><a href="#首先从github将edkii-clone到本地" class="headerlink" title="首先从github将edkii clone到本地"></a>首先从github将edkii clone到本地</h5></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tianocore/edk2</span><br></pre></td></tr></tbody></table></figure><p>​     注：由于网络问题，可能会发生网络连接失败，故多次尝试直到下载成功为止。</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="2-下载成功后，切换到edk2目录"><a href="#2-下载成功后，切换到edk2目录" class="headerlink" title="2.下载成功后，切换到edk2目录"></a>2.下载成功后，切换到edk2目录</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd edk2</span><br></pre></td></tr></tbody></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h5 id="3-由于edk2中有的库关联到别的github仓库中"><a href="#3-由于edk2中有的库关联到别的github仓库中" class="headerlink" title="3.由于edk2中有的库关联到别的github仓库中"></a>3.由于edk2中有的库关联到别的github仓库中</h5><p><img src="C:\Users\byosoft\AppData\Roaming\Typora\typora-user-images\image-20210421180342185.png" alt="image-20210421180342185"></p><p>​       使用命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init  </span><br></pre></td></tr></tbody></table></figure><p>​        补全公共库。</p><h5 id="4-安装ASL编译器"><a href="#4-安装ASL编译器" class="headerlink" title="4.安装ASL编译器"></a>4.安装ASL编译器</h5><p>​      下载<a href="https://acpica.org/sites/acpica/files/iasl-win-20190405.zip"> iasl-win-20190405.zip</a>，然后解压至<code>C:\asl</code>。</p><h5 id="5-安装NASM编译"><a href="#5-安装NASM编译" class="headerlink" title="5.安装NASM编译"></a>5.安装NASM编译</h5><p>​      下载<a href="https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/win64/nasm-2.14.02-win64.zip"> nasm-2.14.02-win64.zip</a>，解压nasm-2.14.02-win64.zip到<code>C:\nasm</code></p><h5 id="6-下载VS2015，并安装C-C-开发环境"><a href="#6-下载VS2015，并安装C-C-开发环境" class="headerlink" title="6.下载VS2015，并安装C/C++开发环境"></a>6.下载VS2015，并安装C/C++开发环境</h5><h5 id="7-进入edk2文件夹，运行bat"><a href="#7-进入edk2文件夹，运行bat" class="headerlink" title="7.进入edk2文件夹，运行bat"></a>7.进入edk2文件夹，运行bat</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edksetup.bat rebuild</span><br></pre></td></tr></tbody></table></figure><h5 id="8-编译Emulator"><a href="#8-编译Emulator" class="headerlink" title="8.编译Emulator"></a>8.编译Emulator</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build -p EmulatorPkg\EmulatorPkg.dsc -t VS2015x85 -a X64</span><br></pre></td></tr></tbody></table></figure><h5 id="9-编译完成后进入目录"><a href="#9-编译完成后进入目录" class="headerlink" title="9.编译完成后进入目录"></a>9.编译完成后进入目录</h5><blockquote><p>​    盘符:\edk2\Build\EmulatorX64\DEBUG_VS2015x86\X64</p></blockquote><p>​      运行<strong>WinHost.exe</strong></p><p>最终界面如下</p><p><img src="C:\Users\byosoft\AppData\Roaming\Typora\typora-user-images\image-20210421185904947.png" alt="image-20210421185904947"></p>]]></content>
      
      
      <categories>
          
          <category> BIOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEFI编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编学习笔记【一】</title>
      <link href="2021/04/21/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>2021/04/21/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Cpu从内存读取数据过程"><a href="#Cpu从内存读取数据过程" class="headerlink" title="Cpu从内存读取数据过程"></a>Cpu从内存读取数据过程</h2><p><img src="https://img-blog.csdnimg.cn/20210311151108602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>cpu通过地址线将地址信息3发出</li><li>cpu通过控制线发出内存读命令，选中存储器芯片，并通知他，将要从中读取数据。</li><li>存储器将3号单元中的数据8通过数据线送入cpu。<br>写操作和读操作的步骤相似，如向3号单元写入数据26</li><li>cpu通过地址线将信息3发出。</li><li>cpu通过控制线发出内存写命令，选中存储器芯片，并通知他，将要从中写入数据。</li><li>cpu通过数据线将数据26送入内存的3号单元。</li></ol><span id="more"></span><h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><p>一个cpu又N根地址线，则可以说这个cpu的地址总线的宽度位N，这样的CPU最多可以寻找2的N次方个内存单元。</p><h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><p>CPU与内存或者其他器件之间的数据传送是通过数据总线来进行的。数据总线的宽度决定了CPU和外界的数据传送速度，8根数据总线一次可传送一个8位二进制数据。16根数据总线一次可以传送两个字节。</p><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>8086CPU的所有寄存器都是16位的，可以存放两个字节。AX、BX、CX、DX这4个寄存器通常用来存放一般性的数据，被称为通用寄存器。</p><ol><li>AX可分为AH和AL；</li><li>BX可分为BH和BL；</li><li>CX可分为CH和CL；</li><li>DX可分为DH和DL；</li></ol><h2 id="8086CPU地址加法器"><a href="#8086CPU地址加法器" class="headerlink" title="8086CPU地址加法器"></a>8086CPU地址加法器</h2><p><img src="https://img-blog.csdnimg.cn/20210311152711685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>段地址在8086CPU的段寄存器中存放。8086CPU有4个段寄存器：CS、DS、SS、ES。</p><h2 id="CS和IP"><a href="#CS和IP" class="headerlink" title="CS和IP"></a>CS和IP</h2><p>CS和IP是8086中两个最关键的寄存器，CS为代码段寄存器，IP为指令指针寄存器。<br>在8086PC机种，任意时刻，设CS中的内容为M，IP中的内容为N，那么8086CPU将从M×16+N单元开始，读取一天指令并执行。<br><img src="https://img-blog.csdnimg.cn/2021031115323048.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210311153246617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="修改CS和IP寄存器"><a href="#修改CS和IP寄存器" class="headerlink" title="修改CS和IP寄存器"></a>修改CS和IP寄存器</h2><p>mov指令不能修改CS和IP的值<br>若想同时修改CS和IP的值：“jmp 段地址：偏移地址”<br>jmp 2AE3:3 执行后：CS=2AE3H ,IP=0003H ，CPU将从2AE33H处读取指令。</p><p>若想修改IP的内容，可用“jmp 某一合法寄存器”指令完成<br>功能：用寄存器中的值修改IP<br>如：<br>jmp ax 指令执行前：ax=1000H，CS=2000H，IP=0003H</p><p>执行后：ax=1000H，CS=2000H，IP=0003H</p><h2 id="DS寄存器和-ADDRESS"><a href="#DS寄存器和-ADDRESS" class="headerlink" title="DS寄存器和[ADDRESS]"></a>DS寄存器和[ADDRESS]</h2><p>8086cpu有个DS寄存器，通常用来存放要访问的数据的段地址。如要读取10000H单元的内容，可用以下程序：<br>mov bx,10000H<br>mov ds,bx<br>mov al,[0]<br>[…]表示一个内存单元，[0]表示内存单元的偏移地址0，<br>只有偏移地址并不能定位内存单元，所以执行指令时，8086cpu会自动取DS中的数据为内存单元的段地址。</p><p>如何用mov指令从10000H中读取数据。10000H用段地址和偏移地址表示为1000：0，我们先将段地址1000H放入ds，然后用mov al,[0]完成传送。mov指令中的[]说明操作对象是一个内存单元，[]中的0说明这个内存单元的偏移地址是0，它的段地址默认放在ds中，指令执行时，8086CPU会自动从ds中取出。<br>mov bx,1000H<br>mov ds,bx</p><p>写几条指令，将al中的数据传送如内存单元10000H：<br>mov bx,1000H<br>mov ds,bx<br>mov [0],al</p><h2 id="BX-和loop指令"><a href="#BX-和loop指令" class="headerlink" title="[BX]和loop指令"></a>[BX]和loop指令</h2><p>1.[bx]是什么？和[0]有些类似，[0]表示内存单元，他的偏移地址是0.<br>mov ax,[0]<br>将一个内存单元的内容送入ax，这个内存单元的长度为2字节，存放一个字，偏移地址为0，段地址在ds中。</p><p>mov al,[0]<br>将一个内存单元的内容放入al，这个内存单元的长度为1字节，存放一个字节，偏移地址为0，段地址在ds中。</p><p>[bx]同样也表示一个内存单元，他的偏移地址在bx中，如：<br>mov ax，[bx]<br>将一个内存单元的内容送入ax，内存单元长度为2字节，存放一个字，偏移地址在bx中，段地址在ds中<br>mov al，[bx]<br>将一个内存单元的内容送入a1，内存单元长度为1字节，存放一个字节，偏移地址在bx中，段地址在ds中</p><p>2.描述符号：（）</p><p>描述符号（）来表示一个寄存器或一个内存单元的内容。比如：（ax）表示ax中的内容</p><p><strong>注</strong>：（）中的元素可以有三种类型：1 寄存器名；2段寄存器名；3内存单元的物理地址</p><h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2><p>用加法计算123*236，结果存在ax中：</p><p>assume cs:code<br>code segment<br>mov ax,0<br>mov cx,236<br>s:add ax,123<br>loop s<br>mov ax,4c00h<br>int 21h<br>code ends</p><h2 id="在代码段中使用数据"><a href="#在代码段中使用数据" class="headerlink" title="在代码段中使用数据"></a>在代码段中使用数据</h2><p>编程计算8个数据的和，结果保存在ax中<br>0123h、0456h、0789h、…..<br>assume cs:code<br>code segment<br>    dw 0123h,0456h…….<br>    mov bx,0<br>    mov ax,0<br>    mov cx,8<br>s:add ax,cs:[bx]<br>    add bx,2<br>    loop s<br>    mov ax,4c00h<br>    int 21h<br>code ends<br>end</p><p>注：dw的含义是定义字型数据。dw即“define word”<br>程序中的指令就要对这8个数据进行累加，可这8个数据在哪里呢？由于他们在代码段中，程序在运行的时候cs中存放代码段的段地址，所以可一次从cs中得到他们的段地址。偏移地址为0，这8个数据就在代码段的便宜0、2、3、4.。。。处。对应的地址就是CS:0,CS:2,CS:4………</p><p>代码段标号：<br>assume cs:code<br>code segment<br>            .<br>            .<br>            .<br>            数据<br>start:<br>            .<br>            .<br>            .<br>            代码<br>            .<br>            .<br>            .<br>code end<br>end start</p><h2 id="6-2-在代码段中是用栈"><a href="#6-2-在代码段中是用栈" class="headerlink" title="6.2 在代码段中是用栈"></a>6.2 在代码段中是用栈</h2><p>完成下面程序，利用栈，将程序中定义的数据逆序存放。<br>assume cs:codesg<br>codeset sement<br>    dw 0123h,0456h,……<br>codesg ends<br>end</p><p><img src="https://img-blog.csdnimg.cn/20210330104320434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="and和or指令"><a href="#and和or指令" class="headerlink" title="and和or指令"></a>and和or指令</h2><ol><li><p>and指令：逻辑与指令，按位进行与运算。<br>mov al, 01100011B<br>and  al, 00111011B<br>执行后：al=00100011B</p></li><li><p>or指令：逻辑或指令，按位进行或运算</p><p> mov al,01100011B<br> or al,00111011B<br> 执行后：al=01111011B</p><h2 id="汇编实现大小写转换"><a href="#汇编实现大小写转换" class="headerlink" title="汇编实现大小写转换"></a>汇编实现大小写转换</h2></li></ol><p>assume cs:codessg,ds:datasg<br>datasg segment<br>    db ‘BaSic’<br>    db ‘iNfOrMaTion’<br>datasg ends</p><p>codesg segment<br>  start:mov ax,datasg<br>  mov ds,ax<br>  mov bx,0<br>  mov cx,5<br> s:mov al,[bx]<br> 如果(al)&gt;61H,则为小写字母的ASCII码,则：sub al,20H<br> mov [bx],al<br> inc bx<br> loop s<br>  codesg ends<br>  end start</p><h2 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx+idata]"></a>[bx+idata]</h2><p>在前面，我们用[bx]的方式来指明一个内存单元，还可以用[bx+idata]表示一个内存单元，偏移地址为(bx)+idata(bx中的数值加上idata)。</p><p>指令 mov ax,[bx+200]的含义:<br>将一个内存单元的内容送入ax，这个内存单元的长度为2个字节，偏移地址为bx中的数值加上200，段地址在ds中<br>数学化的描述为：(ax)=((ds)*16+(bx)+200)</p><p>mov ax,[200+bx]<br>mov ax,200[bx]<br>mov ax,[bx].200</p><h2 id="SI和DI"><a href="#SI和DI" class="headerlink" title="SI和DI"></a>SI和DI</h2><p>si和di是8086CPU中和bx功能相近的寄存器，si和di不能够分成两个8位寄存器来使用。下面的3组指令实现了相同的功能</p><ol><li><p>mov bx,0<br>mov ax,[bx]</p></li><li><p>mov si,0<br> mov ax,[si]</p></li><li><p>mov di,0<br> mov ax,[di] </p><h2 id="bx-si-和-bx-di"><a href="#bx-si-和-bx-di" class="headerlink" title="[bx+si]和[bx+di]"></a>[bx+si]和[bx+di]</h2><p>我们以[bx+si]为例进行讲解<br>[bx+si]表示一个内存单元，它的偏移地址为(bx)+(si)（即bx中的数值加上si中的数值）</p></li></ol><p>mov ax,[bx+si]：<br>将一个内存单元的内容送入ax，偏移地址位bx中的数值加上si中的数值，段地址在ds中</p><p>(ax)=((ds)*16+(bx)+(si))</p><p>或</p><p>mov ax,[bx][si]</p><h2 id="bx-si-idata-和-bx-di-idata"><a href="#bx-si-idata-和-bx-di-idata" class="headerlink" title="[bx+si+idata]和[bx+di+idata]"></a>[bx+si+idata]和[bx+di+idata]</h2><p>指令mov ax,[bx+si+idata]的含义如下：<br>将一个内存单元的内容送入ax，这个内存单元的长度为2字节，偏移地址为bx中的数值再加上idata，段地址在ds中。<br>数学化的描述位：(ax) = ((ds)*16+(bx)+(si)+idata)</p><h2 id="不同的寻址方式的灵活应用"><a href="#不同的寻址方式的灵活应用" class="headerlink" title="不同的寻址方式的灵活应用"></a>不同的寻址方式的灵活应用</h2><ol><li>[idata]用一个常量来表示地址，可用于直接定位一个内存单元；</li><li>[bx]用一个变量来表示内存地址，可用于间接定位一个内存单元；</li><li>[bx+idata]用一个变量和常量表示地址，可在一个起始地址的基础上用变量间接定位一个内存单元;</li><li>[bx+si]用两个变量表示地址；</li><li>[bx+si+idata]用两个变量和一个常量表示地址。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/21/hello-world/"/>
      <url>2021/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

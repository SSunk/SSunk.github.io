<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode 8. 字符串转换整数 (atoi)</title>
      <link href="2021/08/31/leetcode-8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0-atoi/"/>
      <url>2021/08/31/leetcode-8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0-atoi/</url>
      
        <content type="html"><![CDATA[<p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</p><span id="more"></span><p>函数 myAtoi(string s) 的算法如下：</p><p>读入字符串并丢弃无用的前导空格<br>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。<br>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。<br>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。<br>如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。</p><p>代码：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(string str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>; <span class="comment">//默认flag = 1，正数</span></span><br><span class="line">        <span class="keyword">while</span> (str[i] == <span class="string">' '</span>) i ++; <span class="comment">//若str全为空格，str[i] = '\0'(最后一个i)</span></span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) flag = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'-'</span> || str[i] == <span class="string">'+'</span>) i ++;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; str.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(str[i]); i ++)  {</span><br><span class="line">            res = res * <span class="number">10</span> + (str[i] - <span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">if</span> (res &gt;= INT_MAX &amp;&amp; flag == <span class="number">1</span>) <span class="keyword">return</span>  INT_MAX;</span><br><span class="line">            <span class="keyword">if</span> (res &gt; INT_MAX &amp;&amp; flag == <span class="number">-1</span>) <span class="keyword">return</span>  INT_MIN;</span><br><span class="line">        } </span><br><span class="line">        <span class="keyword">return</span> flag * res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【一】高等数学</title>
      <link href="2021/08/27/%E3%80%90%E4%B8%80%E3%80%91%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
      <url>2021/08/27/%E3%80%90%E4%B8%80%E3%80%91%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="一-函数"><a href="#一-函数" class="headerlink" title="一.函数"></a>一.函数</h4><hr><h5 id="1-反函数"><a href="#1-反函数" class="headerlink" title="1.反函数"></a>1.反函数</h5><p><img src="/images/image-20210827105227300.png" alt="image-20210827105227300"></p><span id="more"></span><h5 id="2-函数奇偶性"><a href="#2-函数奇偶性" class="headerlink" title="2.函数奇偶性"></a>2.函数奇偶性</h5><p><img src="/images/image-20210830091102761.png" alt="image-20210830091102761"></p><p><img src="/images/image-20210830091135875.png" alt="image-20210830091135875"></p><h5 id="3-周期性"><a href="#3-周期性" class="headerlink" title="3.周期性"></a>3.周期性</h5><p><img src="/images/image-20210830091229398.png" alt="image-20210830091229398"></p><h4 id="二-极限"><a href="#二-极限" class="headerlink" title="二.极限"></a>二.极限</h4><hr><h5 id="1-有界性"><a href="#1-有界性" class="headerlink" title="1.有界性"></a>1.有界性</h5><p><img src="/images/image-20210831131339066.png" alt="image-20210831131339066"></p><h5 id="2-保号性"><a href="#2-保号性" class="headerlink" title="2.保号性"></a>2.保号性</h5><p><img src="/images/image-20210831131436716.png" alt="image-20210831131436716"></p><h5 id="3-单调有界"><a href="#3-单调有界" class="headerlink" title="3.单调有界"></a>3.单调有界</h5><p><img src="/images/image-20210831131908715.png" alt="image-20210831131908715"></p><h5 id="4-无穷小的比较"><a href="#4-无穷小的比较" class="headerlink" title="4.无穷小的比较"></a>4.无穷小的比较</h5><p><img src="/images/image-20210831132512774.png" alt="image-20210831132512774"></p><h5 id="5-无穷大的比较"><a href="#5-无穷大的比较" class="headerlink" title="5.无穷大的比较"></a>5.无穷大的比较</h5><p><img src="/images/image-20210831132606203.png" alt="image-20210831132606203"></p><p><img src="/images/image-20210831132627850.png" alt="image-20210831132627850"></p><h5 id="6-无穷大与无界变量的关系"><a href="#6-无穷大与无界变量的关系" class="headerlink" title="6.无穷大与无界变量的关系"></a>6.无穷大与无界变量的关系</h5><p><img src="/images/image-20210831132850503.png" alt="image-20210831132850503"></p><h5 id="7-极限是否存在"><a href="#7-极限是否存在" class="headerlink" title="7.极限是否存在"></a>7.极限是否存在</h5><p><img src="/images/image-20210831133235239.png" alt="image-20210831133235239"></p><h5 id="8-泰勒公式"><a href="#8-泰勒公式" class="headerlink" title="8.泰勒公式"></a><strong>8.泰勒公式</strong></h5><p>$$<br>设f(x)在x=x_0处n阶可导，则<br>f(x) = f(x_0)+f’(x_0)(x-x_0)+{f’’(x_0)\over2!}(x-x_0)^2+…{f^{(n)}(x_0)\over n!}(x-x_0)^n+o(x-x_0)^n<br>$$</p><p>$$<br>当x_0=0时，得麦克劳林公式<br>$$</p><p>$$<br>f(x) = f(0)+f’(0)(x)+{f’’(0)\over2!}(x)^2+…{f^{(n)}(0)\over n!}(x)^n+o(x)^n<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 6. Z 字形变换</title>
      <link href="2021/08/24/leetcode-6-Z-%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
      <url>2021/08/24/leetcode-6-Z-%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 <code>"PAYPALISHIRING"</code> 行数为 <code>3</code> 时，排列如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></tbody></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>"PAHNAPLSIIGYIR"</code>。</p><span id="more"></span><p>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "PAYPALISHIRING", numRows = 3</span><br><span class="line">输出："PAHNAPLSIIGYIR"</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "PAYPALISHIRING", numRows = 4</span><br><span class="line">输出："PINALSIGYAHRPI"</span><br><span class="line">解释：</span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "A", numRows = 1</span><br><span class="line">输出："A"</span><br></pre></td></tr></tbody></table></figure><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><hr><p>自己琢磨了半天，用的二维数组，代码又长又臭，于是看题解，题解的思路如此清奇，以致于我开始怀疑我是个弱智<span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>上代码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="keyword">int</span> numRows)</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (numRows&lt;<span class="number">2</span>) <span class="comment">//如果为1行，直接返回当前数组</span></span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">ls</span><span class="params">(numRows)</span></span>; <span class="comment">//初始化一个长度为numRows的string数组</span></span><br><span class="line"><span class="keyword">int</span> row = <span class="number">0</span>, flag = <span class="number">-1</span>; <span class="comment">//这个flag简直就是神来之笔!</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++) { <span class="comment">//遍历s数组</span></span><br><span class="line">ls[row] = ls[row] + s[i]; <span class="comment">//拼接每一行的字符</span></span><br><span class="line"><span class="keyword">if</span> (row == <span class="number">0</span> || row == numRows - <span class="number">1</span>) { <span class="comment">//边界检查，如果为0或numRows即反转</span></span><br><span class="line">flag = -flag;</span><br><span class="line">}</span><br><span class="line">row = row + flag;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">string res = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;numRows;j++) {</span><br><span class="line">res = res + ls[j];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次坑爹的部署SpringBoot项目</title>
      <link href="2021/08/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9D%91%E7%88%B9%E7%9A%84%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE/"/>
      <url>2021/08/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9D%91%E7%88%B9%E7%9A%84%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><hr><p>​        前几天给朋友的朋友的公司写了个企业官网，全部搞定就差部署在服务器上了，构思的是NameSilo+阿里云，于是快速的在NameSilo上买了域名，阿里云买了上海节点的服务器，为啥要在Namesilo上买呢？因为买的是”.com”的顶级域名，首先价格便宜，其次最最主要的还是域名不用备案！当时天真的以为只需要备案一个服务器就可以了，随后快速上传源码搭建环境，开80端口，一切准备就绪访问主页，不出意外，提示无法访问要备案。</p><span id="more"></span><p>​        之前备案过，所以觉得这次备案过程不是特别的繁琐，直到我发现这次备案的单位不是个人，是企业，于是乎仔细翻了翻阿里云备案的文档，企业备案真的是繁琐的一逼啊！！看到了备案的服务器所对应的域名必须要备案！！好吧，我放弃备案，于是乎退掉上海服务器，飞速下单阿里云香港服务器(非大陆服务器免备案)，又是一顿操作搭建环境，官网上线，一开始访问没啥问题，后来主页打开越来越慢，就连连个ssh一直掉线，debug了一下，发现一个加索引的查询的sql都要跑十几秒，一度怀疑是硬盘有问题，试了各种方法怎么都解决不了(除了加钱)，于是乎重装系统，从centos7.3升级到7.6，然后又是搭建环境，结果还是慢，再重装，centos7.6到centos8.2，再搭建环境，还是慢！！实在受不了了，阿里云退款</p><p><img src="/images/image-20210824093700697.png" alt="image-20210824093700697"></p><p>随后去买腾讯云，抱着试一试的心态，因为我感觉腾讯阿里差不多吧，直到买完ping了下</p><p><img src="/images/image-20210824093812278.png" alt="image-20210824093812278"></p><p>惊奇的发现延迟只是阿里云的1/3，一顿狂喜之后，xshell连上明显延迟低了很多很多，又是一顿环境搭建，然后上线，一切正常，Bingo！</p><p>​        鉴于每次搭建环境敲命令敲到手软，于是乎把部署需要用的命令记录一下，下次再搭建环境直接复制粘贴吧。</p><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><hr><ol><li><p>下载JDK</p><ul><li><p>去<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Java SE Development Kit 8 - Downloads (oracle.com)</a>下载JDK安装包，我下载的rpm包，rpm安装就不用再去设置jdk环境变量啥的，省事。</p></li><li><p>rpm -ivh jdk-8u301-linux-x64.rpm</p></li></ul></li><li><p>安装Mysql</p><ul><li><p>首先去<a href="https://dev.mysql.com/downloads/repo/yum/">MySQL :: Download MySQL Yum Repository</a>下载对应系统的仓库</p></li><li><p>安装仓库</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></tbody></table></figure></li><li><p>更新yum</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install update</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用yum安装mysql</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-server</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装完后启动mysql服务</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看mysql初始密码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'temporary password' /var/log/mysqld.log</span><br></pre></td></tr></tbody></table></figure></li><li><p>登录mysql</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改默认密码</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'XXXXXXXX'</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>新建字符集为UTF-8，排序规则为utf8_general_ci的数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE xxxx <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>安装redis</p><ul><li><p>官网<a href="https://redis.io/download">Redis</a>下载gz包</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-6.2.5.tar.gz</span><br></pre></td></tr></tbody></table></figure></li><li><p>解压缩</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf redis-6.2.5.tar.gz</span><br></pre></td></tr></tbody></table></figure></li><li><p>切换到压缩好的目录编译redis，需要提前安装gcc和make</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置redis后台运行，编辑redis.conf中的daemonize为yes</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></tbody></table></figure></li><li><p>后台运行redis</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>安装screen</p><ul><li>yum install screen</li></ul></li><li><p>安装niginx</p><ul><li><p>yum install nginx</p></li><li><p>启动nginx</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改nginx.conf ，将8080端口转发到80</p><blockquote><p>server {</p><pre><code> listen       80; server_name  xxxxxxx.com; #域名信息，即你的域名解析到的主机地址</code></pre><p>​    location / {<br>​        root   html;<br>​        index  index.html index.htm;<br>​        proxy_pass  xxxxxxx.com:8080 ;<br>​    }</p></blockquote></li><li><p>获取真实IP</p><blockquote><p> proxy_set_header   Host             $host;</p><p> proxy_set_header   X-Real-IP        $remote_addr;</p><p> proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</p></blockquote></li><li><p>重启nginx</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>进入screen 跑项目源码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxxx.jar</span><br></pre></td></tr></tbody></table></figure></li></ol><p>完结撒花<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 5. 最长回文子串</title>
      <link href="2021/08/23/leetcode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>2021/08/23/leetcode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "babad"</span><br><span class="line">输出："bab"</span><br><span class="line">解释："aba" 同样是符合题意的答案。</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "cbbd"</span><br><span class="line">输出："bb"</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "a"</span><br><span class="line">输出："a"</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "ac"</span><br><span class="line">输出："a"</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>​            从头开始遍历字符串，设left , right两个指针分别指向当前字符的左右，如left所指字符与当前字符相等，则指针需往前移动(left&gt;=0)，right指针同理向后移动(right&lt;s.length())，left与right都无法移动后，再判断left与right所指的字符是否相同，每个字符的中心扩散对应一个maxsize，遍历结束后返回maxsize的一段字符的起始位置与size.</p><p>代码:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">length</span>() == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> slen = s.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxStart = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slen; i++) {</span><br><span class="line">left = i - <span class="number">1</span>;</span><br><span class="line">right = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; s[left] == s[i]) {</span><br><span class="line">len++;</span><br><span class="line">left--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (right &lt; slen &amp;&amp; s[right] == s[i]) {</span><br><span class="line">len++;</span><br><span class="line">right++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; slen &amp;&amp; s[right] == s[left]) {</span><br><span class="line">len = len + <span class="number">2</span>;</span><br><span class="line">left--;</span><br><span class="line">right++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (len &gt; maxLen) {</span><br><span class="line">maxLen = len;</span><br><span class="line">maxStart = left;</span><br><span class="line">}</span><br><span class="line">len = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">substr</span>(maxStart+<span class="number">1</span>, maxLen);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>makefile笔记</title>
      <link href="2021/05/13/makefile%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/13/makefile%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h5 id="（一）关于程序的编译和链接"><a href="#（一）关于程序的编译和链接" class="headerlink" title="（一）关于程序的编译和链接"></a>（一）关于程序的编译和链接</h5><p>  C/C++的源代码，首先把源代码编译成中间件代码，win下是.obj后缀，unix是.o后缀，生成这些后缀的过程叫做编译，然后把.obj或者.o文件合在一起成为一个可执行文件的动作叫做链接。</p><span id="more"></span><p>  在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便。所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File），也就是 <code>.lib</code> 文件，在UNIX下，是Archive File，也就是 <code>.a</code> 文件。</p><p>  在编译时，编译器只检测程序语法和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是： <code>Link 2001错误</code> ，意思说是说，链接器未能找到函数的实现。你需要指定函数的Object File。</p><h5 id="（二）makefile的规则"><a href="#（二）makefile的规则" class="headerlink" title="（二）makefile的规则"></a>（二）makefile的规则</h5><p>在讲述这个makefile之前，还是让我们先来粗略地看一看makefile的规则。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target ... : prerequisites ...</span><br><span class="line">    command</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></tbody></table></figure><ul><li><p>target</p><p>可以是一个object file（目标文件），也可以是一个执行文件，还可以是一个标签（label）。对于标签这种特性，在后续的“伪目标”章节中会有叙述。</p></li><li><p>prerequisites</p><p>生成该target所依赖的文件和/或target</p></li><li><p>command</p><p>该target要执行的命令（任意的shell命令）</p></li></ul><p>这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。</span><br></pre></td></tr></tbody></table></figure><p>这就是makefile的规则，也就是makefile中最核心的内容。</p><h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><p>正如前面所说，如果一个工程有3个头文件和8个c文件，为了完成前面所述的那三个规则，我们的makefile 应该是下面的这个样子的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br><span class="line">    cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">    cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">    cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">    cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">    cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">    cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">    cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">    cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">    cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">    rm edit main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br></pre></td></tr></tbody></table></figure><p>反斜杠（ <code>\</code> ）是换行符的意思。这样比较便于makefile的阅读。我们可以把这个内容保存在名字为“makefile”或“Makefile”的文件中，然后在该目录下直接输入命令 <code>make</code> 就可以生成执行文件edit。如果要删除执行文件和所有的中间目标文件，那么，只要简单地执行一下 <code>make clean</code> 就可以了。</p><p>在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（ <code>*.o</code> ），依赖文件（prerequisites）就是冒号后面的那些 <code>.c</code> 文件和 <code>.h</code> 文件。每一个 <code>.o</code> 文件都有一组依赖文件，而这些 <code>.o</code> 文件又是执行文件 <code>edit</code> 的依赖文件。依赖关系的实质就是说明了目标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。</p><p>在定义好依赖关系后，后续的那一行定义了如何生成目标文件的操作系统命令，一定要以一个 <code>Tab</code> 键作为开头。记住，make并不管命令是怎么工作的，他只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，如果prerequisites文件的日期要比targets文件的日期要新，或者target不存在的话，那么，make就会执行后续定义的命令。</p><p>这里要说明一点的是， <code>clean</code> 不是一个文件，它只不过是一个动作名字，有点像c语言中的label一样，其冒号后什么也没有，那么，make就不会自动去找它的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在make命令后明显得指出这个label的名字。这样的方法非常有用，我们可以在一个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。</p><h2 id="make是如何工作的"><a href="#make是如何工作的" class="headerlink" title="make是如何工作的"></a>make是如何工作的</h2><p>在默认的方式下，也就是我们只输入 <code>make</code> 命令。那么，</p><ol><li>make会在当前目录下找名字叫“Makefile”或“makefile”的文件。</li><li>如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。</li><li>如果edit文件不存在，或是edit所依赖的后面的 <code>.o</code> 文件的文件修改时间要比 <code>edit</code> 这个文件新，那么，他就会执行后面所定义的命令来生成 <code>edit</code> 这个文件。</li><li>如果 <code>edit</code> 所依赖的 <code>.o</code> 文件也不存在，那么make会在当前文件中找目标为 <code>.o</code> 文件的依赖性，如果找到则再根据那一个规则生成 <code>.o</code> 文件。（这有点像一个堆栈的过程）</li><li>当然，你的C文件和H文件是存在的啦，于是make会生成 <code>.o</code> 文件，然后再用 <code>.o</code> 文件生成make的终极任务，也就是执行文件 <code>edit</code> 了。</li></ol><p>这就是整个make的依赖性，make会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性，即，如果在我找了依赖关系之后，冒号后面的文件还是不在，那么对不起，我就不工作啦。</p><p>通过上述分析，我们知道，像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，不过，我们可以显示要make执行。即命令—— <code>make clean</code> ，以此来清除所有的目标文件，以便重编译。</p><p>于是在我们编程中，如果这个工程已被编译过了，当我们修改了其中一个源文件，比如 <code>file.c</code> ，那么根据我们的依赖性，我们的目标 <code>file.o</code> 会被重编译（也就是在这个依性关系后面所定义的命令），于是 <code>file.o</code> 的文件也是最新的啦，于是 <code>file.o</code> 的文件修改时间要比 <code>edit</code> 要新，所以 <code>edit</code> 也会被重新链接了（详见 <code>edit</code> 目标文件后定义的命令）。</p><p>而如果我们改变了 <code>command.h</code> ，那么， <code>kdb.o</code> 、 <code>command.o</code> 和 <code>files.o</code> 都会被重编译，并且， <code>edit</code> 会被重链接。</p><h2 id="makefile中使用变量"><a href="#makefile中使用变量" class="headerlink" title="makefile中使用变量"></a>makefile中使用变量</h2><p>在上面的例子中，先让我们看看edit的规则：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br><span class="line">    cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br></pre></td></tr></tbody></table></figure><p>我们可以看到 <code>.o</code> 文件的字符串被重复了两次，如果我们的工程需要加入一个新的 <code>.o</code> 文件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。所以，为了makefile的易维护，在makefile中我们可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。</p><p>比如，我们声明一个变量，叫 <code>objects</code> ， <code>OBJECTS</code> ， <code>objs</code> ， <code>OBJS</code> ， <code>obj</code> 或是 <code>OBJ</code> ，反正不管什么啦，只要能够表示obj文件就行了。我们在makefile一开始就这样定义：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">     insert.o search.o files.o utils.o</span><br></pre></td></tr></tbody></table></figure><p>于是，我们就可以很方便地在我们的makefile中以 <code>$(objects)</code> 的方式来使用这个变量了，于是我们的改良版makefile就变成下面这个样子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : $(objects)</span><br><span class="line">    cc -o edit $(objects)</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">    cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">    cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">    cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">    cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">    cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">    cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">    cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">    cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">    rm edit $(objects)</span><br></pre></td></tr></tbody></table></figure><p>于是如果有新的 <code>.o</code> 文件加入，我们只需简单地修改一下 <code>objects</code> 变量就可以了。</p><p>关于变量更多的话题，我会在后续给你一一道来。</p><h2 id="让make自动推导"><a href="#让make自动推导" class="headerlink" title="让make自动推导"></a>让make自动推导</h2><p>GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个 <code>.o</code> 文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。</p><p>只要make看到一个 <code>.o</code> 文件，它就会自动的把 <code>.c</code> 文件加在依赖关系中，如果make找到一个 <code>whatever.o</code> ，那么 <code>whatever.c</code> 就会是 <code>whatever.o</code> 的依赖文件。并且 <code>cc -c whatever.c</code> 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的新makefile又出炉了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : $(objects)</span><br><span class="line">    cc -o edit $(objects)</span><br><span class="line"></span><br><span class="line">main.o : defs.h</span><br><span class="line">kbd.o : defs.h command.h</span><br><span class="line">command.o : defs.h command.h</span><br><span class="line">display.o : defs.h buffer.h</span><br><span class="line">insert.o : defs.h buffer.h</span><br><span class="line">search.o : defs.h buffer.h</span><br><span class="line">files.o : defs.h buffer.h command.h</span><br><span class="line">utils.o : defs.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm edit $(objects)</span><br></pre></td></tr></tbody></table></figure><p>这种方法，也就是make的“隐晦规则”。上面文件内容中， <code>.PHONY</code> 表示 <code>clean</code> 是个伪目标文件。</p><p>关于更为详细的“隐晦规则”和“伪目标文件”，我会在后续给你一一道来。</p><h2 id="另类风格的makefiles"><a href="#另类风格的makefiles" class="headerlink" title="另类风格的makefiles"></a>另类风格的makefiles</h2><p>既然我们的make可以自动推导命令，那么我看到那堆 <code>.o</code> 和 <code>.h</code> 的依赖就有点不爽，那么多的重复的 <code>.h</code> ，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : $(objects)</span><br><span class="line">    cc -o edit $(objects)</span><br><span class="line"></span><br><span class="line">$(objects) : defs.h</span><br><span class="line">kbd.o command.o files.o : command.h</span><br><span class="line">display.o insert.o search.o files.o : buffer.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm edit $(objects)</span><br></pre></td></tr></tbody></table></figure><p>这种风格，让我们的makefile变得很简单，但我们的文件依赖关系就显得有点凌乱了。鱼和熊掌不可兼得。还看你的喜好了。我是不喜欢这种风格的，一是文件的依赖关系看不清楚，二是如果文件一多，要加入几个新的 <code>.o</code> 文件，那就理不清楚了。</p><h2 id="清空目标文件的规则"><a href="#清空目标文件的规则" class="headerlink" title="清空目标文件的规则"></a>清空目标文件的规则</h2><p>每个Makefile中都应该写一个清空目标文件（ <code>.o</code> 和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁。这是一个“修养”（呵呵，还记得我的《编程修养》吗）。一般的风格都是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clean:</span><br><span class="line">    rm edit $(objects)</span><br></pre></td></tr></tbody></table></figure><p>更为稳健的做法是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    -rm edit $(objects)</span><br></pre></td></tr></tbody></table></figure><p>前面说过， <code>.PHONY</code> 表示 <code>clean</code> 是一个“伪目标”。而在 <code>rm</code> 命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然， <code>clean</code> 的规则不要放在文件的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放在文件的最后”。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++拾忆</title>
      <link href="2021/04/26/C++%E6%8B%BE%E5%BF%86/"/>
      <url>2021/04/26/C++%E6%8B%BE%E5%BF%86/</url>
      
        <content type="html"><![CDATA[<h5 id="1-语言链接性"><a href="#1-语言链接性" class="headerlink" title="1.语言链接性"></a>1.语言链接性</h5><p>  链接程序要求每个不同的函数都有不同的符号名。在C中，一个名称只对应一个函数。</p><p>  C语言的编译器可能将spiff这样的函数名翻译为*_spiff*，这种成为C语言链接性。但是在C++中，函数有</p><p>重载的可能，必须将这些函数翻译位不同的符号名称。So，C++编译器执行名称矫正或名称修饰，为重</p><p>载函数生成不同的符号名称。for example, spiff(int) 转换为*_spiff_i* , spiff(double,double)转换为</p><p><em>_spiff_d_d</em>,此为C++的语言链接。</p><p>  如何在C++中是用C库中的文件符号？</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">spiff</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">spoff</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C++"</span> <span class="function"><span class="keyword">void</span> <span class="title">spaff</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UEFI compile environment configuration</title>
      <link href="2021/04/21/UEFI-compile-environment-configuration/"/>
      <url>2021/04/21/UEFI-compile-environment-configuration/</url>
      
        <content type="html"><![CDATA[<h1 id="EDKII-下载"><a href="#EDKII-下载" class="headerlink" title="EDKII 下载"></a>EDKII 下载</h1><ol><li><h5 id="首先从github将edkii-clone到本地"><a href="#首先从github将edkii-clone到本地" class="headerlink" title="首先从github将edkii clone到本地"></a>首先从github将edkii clone到本地</h5></li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tianocore/edk2</span><br></pre></td></tr></tbody></table></figure><p>​     注：由于网络问题，可能会发生网络连接失败，故多次尝试直到下载成功为止。</p><span id="more"></span><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="2-下载成功后，切换到edk2目录"><a href="#2-下载成功后，切换到edk2目录" class="headerlink" title="2.下载成功后，切换到edk2目录"></a>2.下载成功后，切换到edk2目录</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd edk2</span><br></pre></td></tr></tbody></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h5 id="3-由于edk2中有的库关联到别的github仓库中"><a href="#3-由于edk2中有的库关联到别的github仓库中" class="headerlink" title="3.由于edk2中有的库关联到别的github仓库中"></a>3.由于edk2中有的库关联到别的github仓库中</h5><p><img src="/images/image-20210421180342185.png" alt="image-20210421180342185"></p><p>​       使用命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init  </span><br></pre></td></tr></tbody></table></figure><p>​        补全公共库。</p><p>​        <strong>注</strong>:由于网络原因，补全可能失败，务必重复运行此命令，直到没有新的clone出现为止。</p><h5 id="4-安装ASL编译器"><a href="#4-安装ASL编译器" class="headerlink" title="4.安装ASL编译器"></a>4.安装ASL编译器</h5><p>​      下载<a href="https://acpica.org/sites/acpica/files/iasl-win-20190405.zip"> iasl-win-20190405.zip</a>，然后解压至<code>C:\asl</code>。</p><h5 id="5-安装NASM编译"><a href="#5-安装NASM编译" class="headerlink" title="5.安装NASM编译"></a>5.安装NASM编译</h5><p>​      下载<a href="https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/win64/nasm-2.14.02-win64.zip"> nasm-2.14.02-win64.zip</a>，解压nasm-2.14.02-win64.zip到<code>C:\nasm</code></p><h5 id="6-下载VS2015，并安装C-C-开发环境"><a href="#6-下载VS2015，并安装C-C-开发环境" class="headerlink" title="6.下载VS2015，并安装C/C++开发环境"></a>6.下载VS2015，并安装C/C++开发环境</h5><h5 id="7-进入edk2文件夹，运行bat"><a href="#7-进入edk2文件夹，运行bat" class="headerlink" title="7.进入edk2文件夹，运行bat"></a>7.进入edk2文件夹，运行bat</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edksetup.bat rebuild</span><br></pre></td></tr></tbody></table></figure><h5 id="8-编译Emulator"><a href="#8-编译Emulator" class="headerlink" title="8.编译Emulator"></a>8.编译Emulator</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build -p EmulatorPkg\EmulatorPkg.dsc -t VS2015x86 -a X64</span><br></pre></td></tr></tbody></table></figure><h5 id="9-编译完成后进入目录"><a href="#9-编译完成后进入目录" class="headerlink" title="9.编译完成后进入目录"></a>9.编译完成后进入目录</h5><blockquote><p>​    盘符:\edk2\Build\EmulatorX64\DEBUG_VS2015x86\X64</p></blockquote><p>​      运行<strong>WinHost.exe</strong></p><p>最终界面如下</p><p><img src="/images/image-20210421185904947.png" alt="image-20210421185904947"></p>]]></content>
      
      
      <categories>
          
          <category> BIOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEFI编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编学习笔记【一】</title>
      <link href="2021/04/21/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>2021/04/21/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Cpu从内存读取数据过程"><a href="#Cpu从内存读取数据过程" class="headerlink" title="Cpu从内存读取数据过程"></a>Cpu从内存读取数据过程</h2><p><img src="https://img-blog.csdnimg.cn/20210311151108602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>cpu通过地址线将地址信息3发出</li><li>cpu通过控制线发出内存读命令，选中存储器芯片，并通知他，将要从中读取数据。</li><li>存储器将3号单元中的数据8通过数据线送入cpu。<br>写操作和读操作的步骤相似，如向3号单元写入数据26</li><li>cpu通过地址线将信息3发出。</li><li>cpu通过控制线发出内存写命令，选中存储器芯片，并通知他，将要从中写入数据。</li><li>cpu通过数据线将数据26送入内存的3号单元。</li></ol><span id="more"></span><h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><p>一个cpu又N根地址线，则可以说这个cpu的地址总线的宽度位N，这样的CPU最多可以寻找2的N次方个内存单元。</p><h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><p>CPU与内存或者其他器件之间的数据传送是通过数据总线来进行的。数据总线的宽度决定了CPU和外界的数据传送速度，8根数据总线一次可传送一个8位二进制数据。16根数据总线一次可以传送两个字节。</p><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>8086CPU的所有寄存器都是16位的，可以存放两个字节。AX、BX、CX、DX这4个寄存器通常用来存放一般性的数据，被称为通用寄存器。</p><ol><li>AX可分为AH和AL；</li><li>BX可分为BH和BL；</li><li>CX可分为CH和CL；</li><li>DX可分为DH和DL；</li></ol><h2 id="8086CPU地址加法器"><a href="#8086CPU地址加法器" class="headerlink" title="8086CPU地址加法器"></a>8086CPU地址加法器</h2><p><img src="https://img-blog.csdnimg.cn/20210311152711685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>段地址在8086CPU的段寄存器中存放。8086CPU有4个段寄存器：CS、DS、SS、ES。</p><h2 id="CS和IP"><a href="#CS和IP" class="headerlink" title="CS和IP"></a>CS和IP</h2><p>CS和IP是8086中两个最关键的寄存器，CS为代码段寄存器，IP为指令指针寄存器。<br>在8086PC机种，任意时刻，设CS中的内容为M，IP中的内容为N，那么8086CPU将从M×16+N单元开始，读取一天指令并执行。<br><img src="https://img-blog.csdnimg.cn/2021031115323048.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210311153246617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="修改CS和IP寄存器"><a href="#修改CS和IP寄存器" class="headerlink" title="修改CS和IP寄存器"></a>修改CS和IP寄存器</h2><p>mov指令不能修改CS和IP的值<br>若想同时修改CS和IP的值：“jmp 段地址：偏移地址”<br>jmp 2AE3:3 执行后：CS=2AE3H ,IP=0003H ，CPU将从2AE33H处读取指令。</p><p>若想修改IP的内容，可用“jmp 某一合法寄存器”指令完成<br>功能：用寄存器中的值修改IP<br>如：<br>jmp ax 指令执行前：ax=1000H，CS=2000H，IP=0003H</p><p>执行后：ax=1000H，CS=2000H，IP=0003H</p><h2 id="DS寄存器和-ADDRESS"><a href="#DS寄存器和-ADDRESS" class="headerlink" title="DS寄存器和[ADDRESS]"></a>DS寄存器和[ADDRESS]</h2><p>8086cpu有个DS寄存器，通常用来存放要访问的数据的段地址。如要读取10000H单元的内容，可用以下程序：<br>mov bx,10000H<br>mov ds,bx<br>mov al,[0]<br>[…]表示一个内存单元，[0]表示内存单元的偏移地址0，<br>只有偏移地址并不能定位内存单元，所以执行指令时，8086cpu会自动取DS中的数据为内存单元的段地址。</p><p>如何用mov指令从10000H中读取数据。10000H用段地址和偏移地址表示为1000：0，我们先将段地址1000H放入ds，然后用mov al,[0]完成传送。mov指令中的[]说明操作对象是一个内存单元，[]中的0说明这个内存单元的偏移地址是0，它的段地址默认放在ds中，指令执行时，8086CPU会自动从ds中取出。<br>mov bx,1000H<br>mov ds,bx</p><p>写几条指令，将al中的数据传送如内存单元10000H：<br>mov bx,1000H<br>mov ds,bx<br>mov [0],al</p><h2 id="BX-和loop指令"><a href="#BX-和loop指令" class="headerlink" title="[BX]和loop指令"></a>[BX]和loop指令</h2><p>1.[bx]是什么？和[0]有些类似，[0]表示内存单元，他的偏移地址是0.<br>mov ax,[0]<br>将一个内存单元的内容送入ax，这个内存单元的长度为2字节，存放一个字，偏移地址为0，段地址在ds中。</p><p>mov al,[0]<br>将一个内存单元的内容放入al，这个内存单元的长度为1字节，存放一个字节，偏移地址为0，段地址在ds中。</p><p>[bx]同样也表示一个内存单元，他的偏移地址在bx中，如：<br>mov ax，[bx]<br>将一个内存单元的内容送入ax，内存单元长度为2字节，存放一个字，偏移地址在bx中，段地址在ds中<br>mov al，[bx]<br>将一个内存单元的内容送入a1，内存单元长度为1字节，存放一个字节，偏移地址在bx中，段地址在ds中</p><p>2.描述符号：（）</p><p>描述符号（）来表示一个寄存器或一个内存单元的内容。比如：（ax）表示ax中的内容</p><p><strong>注</strong>：（）中的元素可以有三种类型：1 寄存器名；2段寄存器名；3内存单元的物理地址</p><h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2><p>用加法计算123*236，结果存在ax中：</p><p>assume cs:code<br>code segment<br>mov ax,0<br>mov cx,236<br>s:add ax,123<br>loop s<br>mov ax,4c00h<br>int 21h<br>code ends</p><h2 id="在代码段中使用数据"><a href="#在代码段中使用数据" class="headerlink" title="在代码段中使用数据"></a>在代码段中使用数据</h2><p>编程计算8个数据的和，结果保存在ax中<br>0123h、0456h、0789h、…..<br>assume cs:code<br>code segment<br>    dw 0123h,0456h…….<br>    mov bx,0<br>    mov ax,0<br>    mov cx,8<br>s:add ax,cs:[bx]<br>    add bx,2<br>    loop s<br>    mov ax,4c00h<br>    int 21h<br>code ends<br>end</p><p>注：dw的含义是定义字型数据。dw即“define word”<br>程序中的指令就要对这8个数据进行累加，可这8个数据在哪里呢？由于他们在代码段中，程序在运行的时候cs中存放代码段的段地址，所以可一次从cs中得到他们的段地址。偏移地址为0，这8个数据就在代码段的便宜0、2、3、4.。。。处。对应的地址就是CS:0,CS:2,CS:4………</p><p>代码段标号：<br>assume cs:code<br>code segment<br>            .<br>            .<br>            .<br>            数据<br>start:<br>            .<br>            .<br>            .<br>            代码<br>            .<br>            .<br>            .<br>code end<br>end start</p><h2 id="6-2-在代码段中是用栈"><a href="#6-2-在代码段中是用栈" class="headerlink" title="6.2 在代码段中是用栈"></a>6.2 在代码段中是用栈</h2><p>完成下面程序，利用栈，将程序中定义的数据逆序存放。<br>assume cs:codesg<br>codeset sement<br>    dw 0123h,0456h,……<br>codesg ends<br>end</p><p><img src="https://img-blog.csdnimg.cn/20210330104320434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTAyODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="and和or指令"><a href="#and和or指令" class="headerlink" title="and和or指令"></a>and和or指令</h2><ol><li><p>and指令：逻辑与指令，按位进行与运算。<br>mov al, 01100011B<br>and  al, 00111011B<br>执行后：al=00100011B</p></li><li><p>or指令：逻辑或指令，按位进行或运算</p><p> mov al,01100011B<br> or al,00111011B<br> 执行后：al=01111011B</p><h2 id="汇编实现大小写转换"><a href="#汇编实现大小写转换" class="headerlink" title="汇编实现大小写转换"></a>汇编实现大小写转换</h2></li></ol><p>assume cs:codessg,ds:datasg<br>datasg segment<br>    db ‘BaSic’<br>    db ‘iNfOrMaTion’<br>datasg ends</p><p>codesg segment<br>  start:mov ax,datasg<br>  mov ds,ax<br>  mov bx,0<br>  mov cx,5<br> s:mov al,[bx]<br> 如果(al)&gt;61H,则为小写字母的ASCII码,则：sub al,20H<br> mov [bx],al<br> inc bx<br> loop s<br>  codesg ends<br>  end start</p><h2 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx+idata]"></a>[bx+idata]</h2><p>在前面，我们用[bx]的方式来指明一个内存单元，还可以用[bx+idata]表示一个内存单元，偏移地址为(bx)+idata(bx中的数值加上idata)。</p><p>指令 mov ax,[bx+200]的含义:<br>将一个内存单元的内容送入ax，这个内存单元的长度为2个字节，偏移地址为bx中的数值加上200，段地址在ds中<br>数学化的描述为：(ax)=((ds)*16+(bx)+200)</p><p>mov ax,[200+bx]<br>mov ax,200[bx]<br>mov ax,[bx].200</p><h2 id="SI和DI"><a href="#SI和DI" class="headerlink" title="SI和DI"></a>SI和DI</h2><p>si和di是8086CPU中和bx功能相近的寄存器，si和di不能够分成两个8位寄存器来使用。下面的3组指令实现了相同的功能</p><ol><li><p>mov bx,0<br>mov ax,[bx]</p></li><li><p>mov si,0<br> mov ax,[si]</p></li><li><p>mov di,0<br> mov ax,[di] </p><h2 id="bx-si-和-bx-di"><a href="#bx-si-和-bx-di" class="headerlink" title="[bx+si]和[bx+di]"></a>[bx+si]和[bx+di]</h2><p>我们以[bx+si]为例进行讲解<br>[bx+si]表示一个内存单元，它的偏移地址为(bx)+(si)（即bx中的数值加上si中的数值）</p></li></ol><p>mov ax,[bx+si]：<br>将一个内存单元的内容送入ax，偏移地址位bx中的数值加上si中的数值，段地址在ds中</p><p>(ax)=((ds)*16+(bx)+(si))</p><p>或</p><p>mov ax,[bx][si]</p><h2 id="bx-si-idata-和-bx-di-idata"><a href="#bx-si-idata-和-bx-di-idata" class="headerlink" title="[bx+si+idata]和[bx+di+idata]"></a>[bx+si+idata]和[bx+di+idata]</h2><p>指令mov ax,[bx+si+idata]的含义如下：<br>将一个内存单元的内容送入ax，这个内存单元的长度为2字节，偏移地址为bx中的数值再加上idata，段地址在ds中。<br>数学化的描述位：(ax) = ((ds)*16+(bx)+(si)+idata)</p><h2 id="不同的寻址方式的灵活应用"><a href="#不同的寻址方式的灵活应用" class="headerlink" title="不同的寻址方式的灵活应用"></a>不同的寻址方式的灵活应用</h2><ol><li>[idata]用一个常量来表示地址，可用于直接定位一个内存单元；</li><li>[bx]用一个变量来表示内存地址，可用于间接定位一个内存单元；</li><li>[bx+idata]用一个变量和常量表示地址，可在一个起始地址的基础上用变量间接定位一个内存单元;</li><li>[bx+si]用两个变量表示地址；</li><li>[bx+si+idata]用两个变量和一个常量表示地址。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
